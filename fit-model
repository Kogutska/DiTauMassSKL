#! /usr/bin/env python 

import random
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

## sklearn imports
from sklearn import datasets
from sklearn.metrics import classification_report, roc_auc_score
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import AdaBoostRegressor

# root_numpy library makes it easy to read your data stored 
# in a ROOT TTree. Each call to root2array will create a 2D array which contains 
#one row per event, and one column representing each branch you want to use

from root_numpy import root2array, rec2array, tree2rec
import ROOT

## test root file
ifile = "ntuples/truth_gg_100_train.root"
test_file = "ntuples/truth_gg_155_train.root"
# Convert a TTree in a ROOT file into a NumPy structured array
train_array= root2array(ifile, "NOMINAL")
test_array= root2array(test_file, "NOMINAL")

rfile = ROOT.TFile(ifile)
itree = rfile.Get("NOMINAL")
tfile = ROOT.TFile(test_file)
ttree = tfile.Get("NOMINAL")

# Convert the TTree into a NumPy record array
features = ['ditau_dr',
            'met_et',
            'ditau_scal_sum_pt',
            'ditau_vect_sum_pt',
            'ditau_mt_lep0_met',
            'ditau_mt_lep1_met',
            'ditau_dpt',
            'ditau_vis_mass',
            'ditau_dphi',
            'ditau_tau0_pt',
            'ditau_tau1_pt',
            'ditau_met_min_dphi',
            'ditau_met_lep0_cos_dphi',
            'ditau_met_lep1_cos_dphi',
            ]

target = ["parent_m"]

## it must be in TTreeFormula format
selection = "ditau_dr > .8 && ditau_deta < 1.5" #& "ditau_deta ,1.5"
#selection= "ditau_tau0_matched_isHadTau==1 && ditau_tau1_matched_isHadTau==1"

train_record_array = tree2rec(itree, features, selection)
train_target_array = tree2rec(itree, target, selection)
test_array         = tree2rec(ttree, features, selection)

print len(train_record_array), len(train_target_array)

## you have to save it to another array (tuples are immutable)
train_record_array_new= np.array([ f for evt in train_record_array for f in evt ]) 
train_target_array_new= np.array([ f for evt in train_target_array for f in evt ]) 
test_array_new            =np.array([ x for evt in test_array for x in evt ])
## reshape has to be saved to another array !!!
input_array = train_record_array_new.reshape(len(train_target_array), len(features))
target_array = train_target_array_new.reshape(len(train_target_array))
t_array = test_array_new.reshape(len(test_array), len(features))

## estimate
rng = np.random.RandomState(1)
regressor = AdaBoostRegressor(DecisionTreeRegressor(max_depth=10, min_samples_leaf=500),
                          n_estimators=100)
regressor.fit(input_array, target_array)
res= regressor.predict(t_array)
num_bins=30
# the histogram of the data

n, bins, patches = plt.hist(res, num_bins, normed=1, facecolor='green', alpha=0.5)
# plt.plot(bins, y, 'r--')
# # Tweak spacing to prevent clipping of ylabel
# plt.subplots_adjust(left=0.15)
plt.show()
 
