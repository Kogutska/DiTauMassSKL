#! /usr/bin/env python

## python imports
import os
import random
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import pickle
from time import time

## ROOT
import ROOT

## local imports
from ditaumassskl.regressor import Regressor
from ditaumassskl import MASSES, date, parser,base_regs,meta_regs
from ditaumassskl.categories.features import *
from ditaumassskl.categories.hadhad.mva import Category_Preselection as Presel
from ditaumassskl.categories.lephad.mva import Category_Preselection_lh as lhPresel

from ditaumassskl.samples.higgs import Higgs
from ditaumassskl import log

parser.add_argument('-ne', '--nevts', type=int, default=None)
parser.add_argument('-kf', '--kfold', action="store_true", help="do k-fold method")
args = parser.parse_args()

## consts
##---------------------------------------------------------------------------
if args.train_channel=='hh':
    TRAIN_FEATURES = HH_FEATURES
    BRANCHES = HH_FEATURES+TARGET #+MASS_PREDICTORS
    TRAIN_CUTS = ROOT.TCut("")
    if (args.train_level=="reco"):
        TRAIN_CUTS = Presel.cuts #+ ROOT.TCut("(ditau_tau1_matched_isHadTau==1) && (ditau_tau0_matched_isHadTau==1)")

elif args.train_channel=='lh':
    TRAIN_FEATURES = LH_FEATURES
    BRANCHES = LH_FEATURES+TARGET #+MASS_PREDICTORS
    #TRAIN_CUTS = ROOT.TCut("")
    #if (args.train_level=="reco"):
    TRAIN_CUTS = ROOT.TCut("ditau_matched==1") #lhPresel.cuts #

## prepare training data
NUM_FOLDS = 5
FOLD_VAR = "evtnumber"
if (args.train_level=="reco"):
    FOLD_VAR = "event_number"
nEVENTS = args.nevts
PATH = '/home/sbahrase/WorkDesk/SAMPLES/nTUPLEs/xTau75/'

# perpare training samples
train_sample = Higgs(
    ntuple_path=PATH+args.train_channel+'/',
    masses=Higgs.MASSES,
    modes=args.train_mode,
    mode=None,
    level=args.train_level,
    suffix='train')

#log.debug(train_sample.files)

## do the kFold method
##----------------------------------------------------------------------
intime = time()
# book base and meta classifier
regressor = Regressor()
base_name = base_regs[args.base_reg]
meta_name = meta_regs[args.meta_reg]
BASE_REG  = regressor.book_base_clf(base_name=base_name)
n_ESTIMATORS = 200 
MIN_LAEF = 0.005
META_REG  = regressor.book_meta_clf(
    meta_name=meta_name, 
    n_estimators=n_ESTIMATORS, 
    min_weight_fraction_leaf=MIN_LAEF)

log.info(META_REG.get_params())
log.info(TRAIN_CUTS.GetTitle())
regressor.book_meta_clf(meta_name=meta_name)

if (args.kfold):
    for mod in range(1):
        # Select training events for each fold (!=)
        fold_cut = ROOT.TCut(" {0} % {1} != {2}".format(FOLD_VAR, NUM_FOLDS, mod))
        log.info(" {0} % {1} != {2}".format(FOLD_VAR, NUM_FOLDS, mod))
        cuts_string = (TRAIN_CUTS + fold_cut).GetTitle()
        train_data = train_sample.get_dframe(
            nevents=nEVENTS,
            branches=BRANCHES,
            cuts=cuts_string)

        model = regressor.train(train_data, TRAIN_FEATURES, TARGET, META_REG, base_reg=BASE_REG)

        # save model
        model_name = '_'.join([str(date), meta_name, '_'.join(args.train_mode),
                               args.train_level, args.train_channel, str(nEVENTS), 
                               "folds", str(NUM_FOLDS), "mod", str(mod)])+".pkl"
        model_path = os.path.join('./trained_models',model_name)

        with open (model_path,"wb") as f:
            pickle.dump(model,f) 
            log.info(" saving trained model: %s"%model_name)

    ftime = time()
    log.info ("elapsed time for training on {0} features over {1} events: {2} seconds "
              .format(len(TRAIN_FEATURES), train_data.shape[0], ftime-intime)) 

# reserve all samples for training             
else:
    cuts_string = TRAIN_CUTS.GetTitle()
    train_data = train_sample.get_dframe(
        nevents=nEVENTS,
        branches=BRANCHES,
        cuts=cuts_string)
    
    model = regressor.train(train_data, TRAIN_FEATURES, TARGET, META_REG, base_reg=BASE_REG)
    
    # save model
    model_name = '_'.join([str(date), meta_name,
                           #str(n_ESTIMATORS), str(MIN_LAEF), str(len(TRAIN_FEATURES)),
                           '_'.join(args.train_mode),
                           args.train_level, args.train_channel, str(nEVENTS), ".pkl"])
    model_path = os.path.join('./trained_models',model_name)
    with open (model_path,"wb") as f:
        pickle.dump(model,f) 
        log.info(" saving trained model: %s"%model_name)

    ftime = time()
    log.info ("elapsed time for training on {0} features over {1} events: {2} seconds "
              .format(len(TRAIN_FEATURES), train_data.shape[0], ftime-intime)) 
