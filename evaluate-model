#! /usr/bin/env python
""" main deriver for producing validation plots.
"""
import subprocess, os, argparse
import logging
import pickle
from time import time       
from rootpy.tree import Cut
import numpy as np
log = logging.getLogger(os.path.basename((__file__)))                     

## ROOT
import ROOT

## local
from ditaumassskl.categories.hadhad.mva import (
    Category_Preselection, 		       
    Category_Boosted,
    Category_VBF) 
from ditaumassskl.categories.lephad.mva import (
    Category_Preselection_lh, 
    Category_Boosted_lh,
    Category_VBF_lh) 
from ditaumassskl.categories.features import *
from ditaumassskl.samples.higgs import Higgs
from ditaumassskl.plotting.mass_shape import *
from ditaumassskl.plotting.calib_curve import *
from ditaumassskl.plotting.roc_curve import *
from ditaumassskl import date, parser,base_regs,meta_regs


# # setup command line args
parser = argparse.ArgumentParser()
parser.add_argument("--trained_model", "-tm", type=str, help="train models")
parser.add_argument("action", 
                    choices=["mass_shape", "sig_bkg", "plot_roc", "calib_curve", "boosts", "plot_book", "sample_size", "do_all"])
parser.add_argument('-tem','--test_mode',  type=str,default='gg', choices=['gg', 'vbf', 'Z'])
parser.add_argument('-tel','--test_level', type=str,default='reco', choices=['truth', 'reco'])
parser.add_argument('-tec','--test_channel', type=str,default='hh', choices=['hh','lh', 'll'])
parser.add_argument("--ntups_path", default="/home/sbahrase/WorkDesk/SAMPLES/nTUPLEs/xTau75/")

args = parser.parse_args()

##-------------------------------------------------------
## consts
TRUTH_MATCH = ROOT.TCut("(ditau_tau1_matched_isHadTau==1) && (ditau_tau0_matched_isHadTau==1)")
LABEL = r'$H\rightarrow \tau_{%s}\tau_{%s}$'%(args.test_channel[0], args.test_channel[1])     

## branches to read to memory
if args.test_channel=='hh':
    TRAIN_FEATURES = HH_FEATURES
    BRANCHES = HH_FEATURES + HH_MASS_PREDICTORS
    MMC_VAR = HH_MASS_PREDICTORS[0]
    CATEGORY = Category_Boosted() 
    if args.test_mode=='vbf':
        CATEGORY = Category_VBF()
    
elif args.test_channel=='lh':
    TRAIN_FEATURES = LH_FEATURES
    BRANCHES = LH_FEATURES + LH_MASS_PREDICTORS #+LH_CUT_BRANCHES
    MMC_VAR = LH_MASS_PREDICTORS[0]
    CATEGORY = Category_Boosted_lh() 
    if args.test_mode=='vbf':
        CATEGORY = Category_VBF_lh()

# # trained model
log.info('branches to read to memory: {}'.format(BRANCHES))
log.info('Cuts applied on testing samples: {}'.format(CATEGORY.cuts.GetTitle()))

# # prepare training data
MASSES = range(105, 155, 5)
# base_name = base_regs[args.base_reg]
# meta_name = meta_regs[args.meta_reg]

MODEL = (args.trained_model.split("/"))[-1]
MODEL_PREFIX = MODEL[:-10]

FOLD_VAR = "evtnumber"
if (args.test_level=="reco"):
    FOLD_VAR = "event_number"


##---------------------------------------------------------------
## get the model prediction
def get_predictions(model=MODEL,
                    masses=MASSES, 
                    features=TRAIN_FEATURES,
                    category=CATEGORY,
                    mode=args.test_mode,
                    level=args.test_level,
                    channel=args.test_channel,
                    suffix="train",
                    kfold=False,
                    num_folds=0,
                    ):
    """
    Get the predictions from a trained model,
    
    Parameter
    ---------
    model: sklearn ML pickled trained model, 
    
    Return
    ------
    a dictionary of the predictions
    """
    
    predictions = {mode: {}}
    if (kfold):
        suffix = "train" 
        for mass in masses:
            predictions[mode][mass] = {}

            # what to valuate ?
            test_sample = Higgs(
                ntuple_path=args.ntups_path+channel+'/',
                mass=mass,
                mode=mode,
                level=level,
                suffix=suffix)

            predictions[mode][mass]["BRT"] = []
            predictions[mode][mass]["MMC"] = []
            for rem in range(num_folds):
                # assuming trained on "event_number % {} != {}".format(NUM_FOLDS, rem)
                # then you should test on the complement of training set.
                fold_cut = ROOT.TCut("{} % {} == {}".format(FOLD_VAR, num_folds, rem))
                cuts_string = (category.cuts + fold_cut).GetTitle()
                test_data = test_sample.get_dframe(
                    branches=BRANCHES+[FOLD_VAR], #<! event_number is needed for folds
                    cuts=cuts_string)

                # load the trained model
                model_name = MODEL_PREFIX + "_mod_%i.pkl"%rem
                model_path = os.path.join('./trained_models',model_name)
                with open (model_path, "rb") as mfile:
                    model = pickle.load(mfile)

                # read the features valus to memory
                feats = test_data.reindex(columns=TRAIN_FEATURES)

                # get the BRT scores from model predictor
                predictions[mode][mass][rem] = model.predict(feats)
                predictions[mode][mass]["BRT"].append(predictions[mode][mass][rem])

                # get MMC predictions
                predictions[mode][mass]["MMC"].append(
                    test_data.reindex(columns=[MMC_VAR]).ix[:,0])

            # cat all prediction vectors
            predictions[mode][mass]["BRT"] = np.concatenate(predictions[mode][mass]["BRT"])
            predictions[mode][mass]["MMC"] = np.concatenate(predictions[mode][mass]["MMC"])
        
    else: #<! assuming separate training and testing samples
        cuts_string = (category.cuts).GetTitle()
        for mass in masses:
            predictions[mode][mass] = {}
            test_sample = Higgs(
                ntuple_path=args.ntups_path+args.test_channel+'/',
                mass=mass,
                mode=mode,
                level=args.test_level,
                suffix='test')
            log.debug(test_sample.files)
            test_data = test_sample.get_dframe(branches=BRANCHES, cuts=cuts_string)
            feats = test_data.reindex(columns=TRAIN_FEATURES)

            # load the trained model
            with open (args.trained_model, "rb") as mfile:
                model = pickle.load(mfile)
            predictions[mode][mass]["BRT"] = model.predict(feats)
            
            # get MMC predictions
            predictions[mode][mass]["MMC"] = test_data.reindex(columns=[MMC_VAR]).ix[:,0]

    return predictions

##------------------------------------------------------------------
## take actions
if __name__=="__main__":
    if (args.action=="calib_curve"):
        predictions = get_predictions()
        
        # do the mass shape plots
        # for mass in MASSES:
        #     for st in ["BRT", "MMC"]:
        #         plot_mass(predictions[args.test_mode][mass][st], true_mass=mass, 
        #                   category=CATEGORY, prefix=MODEL_PREFIX)

        plot_calib_curve(MASSES, predictions,
                         pnames=["BRT", "MMC"],
                         prefix=MODEL_PREFIX,
                         category=CATEGORY,
                         label=LABEL)
        
    if (args.action=="plot_roc"):
        h125_est = get_predictions(masses=[125], mode=args.test_mode, 
                                   suffix="test", 
                                   kfold=False, 
                                   num_folds=5
                                   ) 
        z90_est  = get_predictions(masses=[90], mode='Z', suffix="test")
        
        # do the mass shape plots
        for st in ["BRT", "MMC"]:
            compare_mass(h125_est[args.test_mode][125][st], z90_est["Z"][90][st],
                         estimator=st,category=CATEGORY,prefix=MODEL_PREFIX,
                         label=LABEL)
            
        # do the roc curve 
        brt_eff = cal_roc(z90_est["Z"][90]["BRT"], h125_est[args.test_mode][125]["BRT"])
        mmc_eff = cal_roc(z90_est["Z"][90]["MMC"], h125_est[args.test_mode][125]["MMC"])
        plot_roc_curve(brt_eff, mmc=mmc_eff, 
                       category=CATEGORY,prefix=MODEL_PREFIX,
                       label=LABEL)
    
    if (args.action=="sample_size"):
        pass
    if (args.action=="boosts"):
        pass
    
    if (args.action=="plot_book"):
        pass
    if (args.action=="do_all"):
        pass
    
